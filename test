<template>
    <div class="row g-2 mb-2">
      <div class="col-sm-6 col-xl-4">
        <div class="card" style="height: 79px;">
          <div class="card-body">
            <div class="d-flex align-items-start justify-content-between">
              <div class="content-left" style=" margin-top: -11px;" >
                <span> القوانين</span>
                <div class="d-flex align-items-center my-1">
                  <h4 class="mb-0 me-2">{{ lawsCount }}</h4>
                 </div>
              </div>
              <span class="badge bg-label-primary rounded p-2">
                <i class="ti ti-book ti-sm"></i>
              </span>
            </div>
          </div>
        </div> 
      </div>
      <div class="col-sm-6 col-xl-4">
        <div class="card" style="height: 79px;">
          <div class="card-body">
            <div class="d-flex align-items-start justify-content-between">
              <div class="content-left" style=" margin-top: -11px;">
                <span> اللوائح</span>
                <div class="d-flex align-items-center my-1">
                  <h4 class="mb-0 me-2">{{ regulationsCount }}</h4>
                 </div>
              </div>
              <span class="badge bg-label-primary rounded p-2">
                <i class="ti ti-book ti-sm"></i>
              </span>
            </div>
          </div>
        </div>
      </div>
      <div class="col-sm-6 col-xl-4">
        <div class="card" style="height: 79px;">
          <div class="card-body">
            <div class="d-flex align-items-start justify-content-between">
              <div class="content-left" style=" margin-top: -11px;">
                <span> التعميمات</span>
                <div class="d-flex align-items-center my-1">
                  <h4 class="mb-0 me-2">{{ circularsCount }}</h4>
                 </div>
              </div>
              <span class="badge bg-label-primary rounded p-2">
                <i class="ti ti-book ti-sm"></i>
              </span>
            </div>
          </div>
        </div>
      </div>
     
      <transition name="fade">
          <div v-if="alertMessage" class="alert"> {{ alertMessage }}</div>
        </transition>
          </div>
        
   
  
    <!-------------------------------------------------------------- بحث المستخدمين  -->
  
<div class="card" style="border: 2px solid; border-color: #82c5ff; box-shadow: none">
      <h5 class="card-header clickable" @click="toggleShowHide"    style="background-color: rgb(48 52 90); color: wheat; padding: 10px;">
        <i class="fa fa-add" style=" margin-left: 4px;"></i>اضافة عنصر جديد للمكتبة 
      </h5>
<div class="card-body" >
        <div v-if="showAdd"   class="row">
          <div class="row" style="margin-top: 11px;">
          <div class="col-12 col-md-3">
            <label class="form-label" 
            for="modalEditUserLastName" style="color: rgb(1, 1, 1)">الاسم   
            </label>
            <input v-model="name" type="text"  class="form-control">
            <p v-if="errors.name" class="error" >{{ errors.name }}</p>
          </div>        
          <div class="col-md-3">
            <label style="color: rgb(1, 1, 1)">النوع</label>
            <select ref="typeSelect" v-model="type"  class="select2 form-select" data-allow-clear="true" >
              <option selected></option>
              <option  v-for="(option,index) in typeOptions" :key="index" :value="option.CONST_ID">
                {{ option.CONST_NAME }}
              </option> 
         
            </select>
            <p v-if="errors.type" class="error" >{{ errors.type }}</p>

          </div>
          <div class="col-md-3">
            <label style="color: rgb(1, 1, 1)">المصدر</label>
            <select ref="sourceSelect" v-model="source" class="select2 form-select" data-allow-clear="true" >
              <option selected></option>
              <option  v-for="(option,index) in sourceOptions" :key="index" :value="option.CONST_ID">
                {{ option.CONST_NAME }}
              </option> 
            </select>
            <p v-if="errors.source" class="error" >{{ errors.source }}</p>

          </div>
          <div class="col-md-3">
            <label style="color: rgb(1, 1, 1)">الحالة</label>
            <select ref="statusSelect"  v-model="status" class="select2 form-select" data-allow-clear="true" >
               <option  v-for="(option,index) in statusOptions" :key="index" :value="option.CONST_ID">
                {{ option.CONST_NAME }}
              </option> 
            </select>
            <p v-if="errors.status" class="error" >{{ errors.status }}</p>

          </div> 
          <div class="col-12 col-md-3">
                        <label for="flatpickr-date" class="form-label" style="color: rgb(1, 1, 1)"> تاريخ الاصدار</label>
                          <input v-model="issueDate" type="date"   class="form-control" >
                          <p v-if="errors.issueDate" class="error" >{{ errors.issueDate }}</p>

            </div>
 
          <div class="col-12 col-md-3">
                    <label for="flatpickr-date" class="form-label" style="color: rgb(1, 1, 1)"> تاريخ التعديل</label>
                      <input v-model="modificationDate" type="date"   class="form-control" >
                      <p v-if="errors.modificationDate" class="error" >{{ errors.modificationDate }}</p>

            </div> 
          <div class="col-md-6">
            <label style="color: rgb(1, 1, 1)">  الملاحظات</label>
            <textarea v-model="note" class="form-control"   rows="1" ></textarea>
          </div>
          <div class="col-md-3">
            <label style="color: rgb(1, 1, 1)">تحميل PDF</label>
             <input type="file" class="form-control" @change="onFileChange" />
          </div> 
       
        </div>
        
        <br>
        <br>
        <div class="row d-flex justify-content-center">
          <div class="col-md-1">
            <button type="submit" @click="submitForm" class="btn btn-primary waves-effect waves-light">
              <i class="fa fa-plus"></i>
              اضافة
            </button>
          </div>
  
       
          
          
          <div class="col-md-1">
            <button type="button" class="btn btn-danger waves-effect waves-light">
              <i class="fa fa-eraser"></i>
              تفريغ
            </button>
          </div>
        </div>
    
        </div>
      </div>
</div>
<!-- end of add form -->

   <div class="card" style="border: 2px solid; border-color: #82c5ff; box-shadow: none">
      <h5 class="card-header clickable" @click="toggleShowHide"    style="background-color: rgb(48 52 90); color: wheat; padding: 10px;">
        <i class="fa fa-search" style=" margin-left: 4px;"></i>    ابحث في المكتبة   
      </h5>
<div class="card-body" >
        <div v-if="showSearch"   class="row">
          <div class="row" style="margin-top: 11px;">
          <div  class="col-12 col-md-3">
            <label class="form-label"  for="modalEditUserLastName" style="color: rgb(1, 1, 1)">الاسم   
            </label>
            <input  v-model="searchTerm" type="text" @input="search"  class="form-control">
            <p v-if="errors.name" class="error" >{{ errors.name }}</p>
          </div>        
          <div class="col-md-3"> 
          
            <label style="color: rgb(1, 1, 1)">النوع</label>
            <select ref="typeSelect" v-model="typeSearch"  class="select2 form-select" data-allow-clear="true" >
              <option selected></option>
              <option  v-for="(option,index) in typeOptions" :key="index" :value="option.CONST_ID">
                {{ option.CONST_NAME }}
              </option> 
         
            </select>
            <p v-if="errors.type" class="error" >{{ errors.type }}</p>

          </div>
          <div class="col-md-3">
            <label style="color: rgb(1, 1, 1)">المصدر</label>
            <select ref="sourceSelect"  v-model="sourceSearch"  class="select2 form-select" data-allow-clear="true" >
              <option selected></option>
              <option  v-for="(option,index) in sourceOptions" :key="index" :value="option.CONST_ID">
                {{ option.CONST_NAME }}
              </option> 
            </select>
            <p v-if="errors.source" class="error" >{{ errors.source }}</p>

          </div>
          <div class="col-md-3">
            <label style="color: rgb(1, 1, 1)">الحالة</label>
            <select ref="statusSelect"  v-model="statusSearch"   class="select2 form-select" data-allow-clear="true" >
               <option  v-for="(option,index) in statusOptions" :key="index" :value="option.CONST_ID">
                {{ option.CONST_NAME }}
              </option> 
            </select>
            <p v-if="errors.status" class="error" >{{ errors.status }}</p>
          </div> 

      
 
       
          
        </div>
        
        <br>
        <br>
        <div class="row d-flex justify-content-center">
         
  
          <div class="col-md-1">
            <button type="button" class="btn btn-info waves-effect waves-light">
              <i class="fa fa-search"></i>
              بحث
            </button>
          </div> 
          
           
        </div>
    
        </div>
      </div>
    </div>
   <!-- end of search form  -->
    <div class="card" style="border: 2px solid; border-color: #82c5ff; box-shadow: none">
      <h5 class="card-header" style="background-color: rgb(48 52 90); color: wheat ; padding: 10px;" > عرض البحث :</h5>
  
      <div class="table-responsive text-nowrap">
        <div v-if="error">
            <p>{{ error.message }}</p>
        </div>
        <table v-else class="table">
          <thead class="table-">
            <tr>
              
              <th>  العنوان</th>
              <th>تاريخ الاصدار</th>
              <th>تاريخ التعديل</th>
              <th>الحالة</th>
              <th>المصدر</th>
              <th>التفاصيل</th>
              <th>إجراء</th>
            </tr>
          </thead>
          <tbody class="table-border-bottom-0">
            <tr v-for="(decision, index) in filteredResults" :key="index">
              <td>  <strong>{{ decision.LIBER_NM }}</strong></td>
              <td>{{ formatDate(decision.RELEASE_DATE) }}</td>
              <td>{{ formatDate(decision.MODIFIED_DATE) }}</td>
              <td>
              {{ decision.STATUS_NAME }}
              </td>
              <td> 
                {{ decision.SOURCE_NAME }}
              </td>
              <td>
                {{ decision.NOTE }}
              </td>

              <td>
<button class="btn btn-sm btn-danger" @click="deleteDecision(decision.LIBER_NO,decision.FILE_ID)">حذف</button>
              </td>
            </tr>
          
          </tbody>
        </table>
      </div>
      
     
      
    </div>
   <!-- end of table -->
  </template>
    
    <script>
    export default {
 
    data() {
      return {
         responseData: [],
         regulationsCount: 0,
         lawsCount: 0,
         circularsCount: 0,
         
     // get select options

         statusOptions:[],
         sourceOptions:[],
         typeOptions:[],

         // form inputs 
         name:'',
         issueDate: '',
         modificationDate:'',
         note:'',
         status:'',
         type:'',
         source:'',
         errors:{
          name:'',
         issueDate:'',
         modificationDate:'',
         status:'',
         type:'',
         source:'',
        
        },


        // show_hide
        showAdd : false,
        showSearch : true,        
        searchTerm: '',
        searchResults:[],
        nameSearch:'',
          statusSearch:'',
         typeSearch:'',
         sourceSearch:'',
        alertMessage:'',
        error: null
      };
    },
 
   computed: {
  filteredResults() {
     let results = this.searchResults.filter(item => 
      item.LIBER_NM.toLowerCase().includes(this.searchTerm.toLowerCase())
    );

     if (this.sourceSearch && this.sourceSearch.trim() !== '') {
      results = results.filter(item => item.SOURCE_ID === this.sourceSearch)
    }

     if (this.typeSearch && this.typeSearch.trim() !== '') {
      results = results.filter(item => item.FILE_ID === this.typeSearch)
    }

     if (this.statusSearch && this.statusSearch.trim() !== '') {
      results = results.filter(item => item.STATUS_ID === this.statusSearch)
    }

    return results;
  }

},

async mounted(){
        const formData = new FormData();
        formData.append('p_file_id',6);
        this.responseData = await this.getAllData('/get_library',formData);

      // regulations count
  const formData1 = new FormData();
        formData1.append('p_file_id',6);
        this.regulationsCount = await this.getCount('/get_library',formData1);
        
      // laws count
  const formData2 = new FormData();
        formData2.append('p_file_id',4);
        this.lawsCount = await this.getCount('/get_library',formData2);
        const num4 = await this.getAllData('/get_library',formData2);
      this.responseData.push(...num4);
      // circulars count
  const formData3 = new FormData();
        formData3.append('p_file_id',5);
        this.circularsCount = await this.getCount('/get_library',formData3);  
        const num5 = await this.getAllData('/get_library',formData3);
        this.responseData.push(...num5);

        this.searchResults = [...this.responseData];
        

  // get constants
  const formDataGetStatus = new FormData();
        formDataGetStatus.append('p_const_id',3);
        this.statusOptions = await this.getconstants('/get_constants',formDataGetStatus);
        
        const formDataGetSources = new FormData();
        formDataGetSources.append('p_const_id',9);
        this.sourceOptions = await this.getconstants('/get_constants',formDataGetSources);  
         
  const formDataGetTypes = new FormData();
        formDataGetTypes.append('p_const_id',2);
        this.typeOptions = await this.getconstants('/get_constants',formDataGetTypes);
  // end get constants

  
},

created() {
  this.searchResults = [...this.responseData];
},
methods:{

// file processing
onFileChange(e) {
    let files = e.target.files || e.dataTransfer.files;
    if (!files.length)
      return;
    this.createImage(files[0]);
  },

  createImage(file) {
    let reader = new FileReader();
    let vm = this;
    reader.onload = (e) => {
      vm.pdfFile = e.target.result;
      console.log(vm.pdfFile);
    };
    reader.readAsDataURL(file);
  },
  // end file processing
  async getAllData(endpoint,formData){
    try {
        const response =  await this.$http.post(endpoint,formData);
        return response.data.p_result_out;
       } catch (error) {
        return error;
      }
  },
  
  async getCount(endpoint,formData){
    try {
        const response =  await this.$http.post(endpoint,formData);
        console.log(response.data.p_result_out.length);
        return response.data.p_result_out.length;
       } catch (error) {
        return error;
      }
  },


  // send form

 
async submitForm(){

 
this.errors = {
          name:'',
         issueDate:'',
         modificationDate:'',
         status:'',
         type:'',
         source:'',
        
        };

        let isValid = true;

        if(!this.name){
          this.errors.name = 'حقل الاسم مطلوب';
          isValid = false;
        }
        if(!this.issueDate){
          this.errors.issueDate = 'حقل تاريخ الاصدار مطلوب';
          isValid = false;
        }
    if(!this.modificationDate){
          this.errors.modificationDate = 'حقل تاريخ التعديل مطلوب';
          isValid = false;
        }
  if(!this.status){
          this.errors.status = 'حقل الحالة مطلوب'  ;
          isValid = false;
        }
   if(!this.type){
          this.errors.type = 'حقل النوع مطلوب'  ;
          isValid = false;
        }
 
   if(!this.source){
          this.errors.source = 'حقل المصدر مطلوب'  ;
          isValid = false;
        }
 

        if(!isValid){return;}
  try {
    const formData = new FormData();
    formData.append('p_liber_nm',this.name);
    formData.append('p_file_id',this.type);
    formData.append('p_status_id',this.status);
    formData.append('p_source_id',this.source);
    formData.append('p_release_date', this.formatDate(this.issueDate));
    formData.append('p_modified_date',this.formatDate(this.modificationDate));
    formData.append('p_liber_file_path','path/file.pdf');
    formData.append('p_note',this.note);
    formData.append('P_INSERT_USER','');
    formData.append('p_liber_file_path',this.pdfFile);
     

 
    const response = await this.axios.post('/insert_library',formData);
    if(response.data.p_err_code==4){

      const statusText = this.$refs.statusSelect.options[this.$refs.statusSelect.selectedIndex].text;
      const typeText = this.$refs.typeSelect.options[this.$refs.typeSelect.selectedIndex].text;
      const sourceText = this.$refs.sourceSelect.options[this.$refs.sourceSelect.selectedIndex].text;
      if(this.type == 6){

this.regulationsCount++;
} else if(this.type == 4){
this.lawsCount++;
 
}
else if(this.type == 5){
this.circularsCount++;

}
      this.responseData.push({
          
              LIBER_NM: this.name,
              FILE_ID: typeText,
              STATUS_NAME: statusText,
              SOURCE_NAME: sourceText ,
              RELEASE_DATE: this.formatDate(this.issueDate),
              MODIFIED_DATE: this.formatDate(this.modificationDate),
              NOTE: this.note,
              p_liber_file_path: this.pdfFile,

         
      });
      this.searchResults = [...this.responseData];

      this.status ='';
      this.type ='';
      this.modificationDate ='';
      this.source ='';
      this.issueDate ='';
      this.name ='';
      this.note ='';
      this.alertMessage = 'تم اضافة عنصر جديد';
      setTimeout(() => {
        this.alertMessage='';
      }, 3000);
    }
  } catch (error) {
    console.log(error);
    
  }
}
  // end sending
  ,
     async deleteDecision(decisionId,typeId){
      
      const formData = new FormData();
        formData.append('p_liber_no',decisionId);
    try {
          await this.$http.post('/delete_library',formData);
        this.filteredResults = this.filteredResults.filter(d=>d.LIBER_NO!==decisionId)
        if(typeId == 6){

          this.regulationsCount--;
        } else if(typeId == 4){
          this.lawsCount--;
           
        }
        else if(typeId == 5){
          this.circularsCount--;

        }
        
       } catch (error) {
        return error;
      }
  },
 
  // get constants for select option
  async getconstants(endpoint,formData){
    try {
        const response =  await this.$http.post(endpoint,formData);
        console.log(response.data.p_result_out.length);
        return response.data.p_result_out;
       } catch (error) {
        return error;
      }
  },



  // helper methods

  formatDate(date){
        const  months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
        const d = new Date(date);
        const day = d.getDate();
        const month = months[d.getMonth()];
        const year = d.getFullYear();

        return `${day}-${month}-${year}`;
      }



      // dom methods
,
      toggleShowHide(){
        this.showAdd = !this.showAdd;
        this.showSearch = !this.showSearch;
      }
      , 

      search() {
  if (this.searchTerm) {
    const lowerCaseSearchTerm = this.searchTerm.toLowerCase();
    this.searchResults = this.responseData.filter(item =>
      (item.LIBER_NM && item.LIBER_NM.toLowerCase().includes(lowerCaseSearchTerm)) ||
      (item.FILE_ID && item.FILE_ID.toLowerCase().includes(lowerCaseSearchTerm)) ||
      (item.SOURCE_NAME && item.SOURCE_NAME.toLowerCase().includes(lowerCaseSearchTerm)) ||
      (item.STATUS_NAME && item.STATUS_NAME.toLowerCase().includes(lowerCaseSearchTerm))
    );
  } else {
    this.searchResults = [...this.responseData];
  }
},

}


  }
  </script >
    
    <style scoped>
  .content-left {
    color: rgba(234, 15, 15, 0.894);
  }
  .error{
    color: red;
  }

    .alert{
      padding:10px;
      margin:10px 0;
      background-color:#f0f0f0;
      color:green;
      border: 1px solid green;
    }

    .fade-enter-active, .fade-leave-active{
      transition:opacity 0.5s;
    }
    .fade-enter, .fade-leave-to{
      opacity:0;
    }

    /* add form */

    .clickable{
      cursor:pointer;
      padding:10px;
      border:1px solid transparent;
      transition: background-color 0.3s, border-color 0.3s;
    }
    .clickable:hover{
      background-color:#ddd;
      border-color:#aaa;
    }

  </style>
    
