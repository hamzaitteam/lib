   
    <script>
    export default {
 
    data() {
      return {
         responseData: [],
         regulationsCount: 0,
         lawsCount: 0,
         circularsCount: 0,
         
     // get select options

         statusOptions:[],
         sourceOptions:[],
         typeOptions:[],

         // form inputs 
         name:'',
         issueDate: '',
         modificationDate:'',
         note:'',
         status:'',
         type:'',
         source:'',
         errors:{
          name:'',
         issueDate:'',
         modificationDate:'',
         status:'',
         type:'',
         source:'',
        
        },


        // show_hide
        showAdd : false,
        showSearch : true,        
        searchTerm: '',
        searchResults:[],
        alertMessage:'',
        error: null
      };
    },
 

async mounted(){
        const formData = new FormData();
        formData.append('p_file_id',6);
        this.responseData = await this.getAllData('/get_library',formData);

      // regulations count
  const formData1 = new FormData();
        formData1.append('p_file_id',6);
        this.regulationsCount = await this.getCount('/get_library',formData1);
        
      // laws count
  const formData2 = new FormData();
        formData2.append('p_file_id',4);
        this.lawsCount = await this.getCount('/get_library',formData2);
        const num4 = await this.getAllData('/get_library',formData2);
      this.responseData =  [...num4];
      // circulars count
  const formData3 = new FormData();
        formData3.append('p_file_id',5);
        this.circularsCount = await this.getCount('/get_library',formData3);  
        const num5 = await this.getAllData('/get_library',formData3);
      this.responseData =  [...num5];
        this.searchResults = [...this.responseData];
  

  // get constants
  const formDataGetStatus = new FormData();
        formDataGetStatus.append('p_const_id',3);
        this.statusOptions = await this.getconstants('/get_constants',formDataGetStatus);
        
        const formDataGetSources = new FormData();
        formDataGetSources.append('p_const_id',9);
        this.sourceOptions = await this.getconstants('/get_constants',formDataGetSources);  
         
  const formDataGetTypes = new FormData();
        formDataGetTypes.append('p_const_id',2);
        this.typeOptions = await this.getconstants('/get_constants',formDataGetTypes);
  // end get constants

  
},

created() {
  this.searchResults = [...this.responseData];
},
methods:{


  async getAllData(endpoint,formData){
    try {
        const response =  await this.$http.post(endpoint,formData);
        return response.data.p_result_out;
       } catch (error) {
        return error;
      }
  },
  
  async getCount(endpoint,formData){
    try {
        const response =  await this.$http.post(endpoint,formData);
        console.log(response.data.p_result_out.length);
        return response.data.p_result_out.length;
       } catch (error) {
        return error;
      }
  },


  // send form

 
async submitForm(){

 
this.errors = {
          name:'',
         issueDate:'',
         modificationDate:'',
         status:'',
         type:'',
         source:'',
        
        };

        let isValid = true;

        if(!this.name){
          this.errors.name = 'حقل الاسم مطلوب';
          isValid = false;
        }
        if(!this.issueDate){
          this.errors.issueDate = 'حقل تاريخ الاصدار مطلوب';
          isValid = false;
        }
    if(!this.modificationDate){
          this.errors.modificationDate = 'حقل تاريخ التعديل مطلوب';
          isValid = false;
        }
  if(!this.status){
          this.errors.status = 'حقل الحالة مطلوب'  ;
          isValid = false;
        }
   if(!this.type){
          this.errors.type = 'حقل النوع مطلوب'  ;
          isValid = false;
        }
 
   if(!this.source){
          this.errors.source = 'حقل المصدر مطلوب'  ;
          isValid = false;
        }
 

        if(!isValid){return;}
  try {
    const formData = new FormData();
    formData.append('p_liber_nm',this.name);
    formData.append('p_file_id',this.type);
    formData.append('p_status_id',this.status);
    formData.append('p_source_id',this.source);
    formData.append('p_release_date', this.formatDate(this.issueDate));
    formData.append('p_modified_date',this.formatDate(this.modificationDate));
    formData.append('p_liber_file_path','path/file.pdf');
    formData.append('p_note',this.note);
    formData.append('P_INSERT_USER','');
     

 
    const response = await this.axios.post('/insert_library',formData);
    if(response.data.p_err_code==4){

      const statusText = this.$refs.statusSelect.options[this.$refs.statusSelect.selectedIndex].text;
      const typeText = this.$refs.typeSelect.options[this.$refs.typeSelect.selectedIndex].text;
      const sourceText = this.$refs.sourceSelect.options[this.$refs.sourceSelect.selectedIndex].text;
      
      this.responseData.push({
          
              LIBER_NM: this.name,
              FILE_ID: typeText,
              STATUS_NAME: statusText,
              SOURCE_NAME: sourceText ,
              RELEASE_DATE: this.formatDate(this.issueDate),
              MODIFIED_DATE: this.formatDate(this.modificationDate),
              NOTE: this.note,
         
      });
      this.searchResults = [...this.responseData];

      this.status ='';
      this.type ='';
      this.modificationDate ='';
      this.source ='';
      this.issueDate ='';
      this.name ='';
      this.note ='';
      this.alertMessage = 'تم اضافة عنصر جديد';
      setTimeout(() => {
        this.alertMessage='';
      }, 3000);
    }
  } catch (error) {
    console.log(error);
    
  }
}
  // end sending
  ,
     async deleteDecision(decisionId){
      const formData = new FormData();
        formData.append('p_liber_no',decisionId);
    try {
          await this.$http.post('/delete_library',formData);
        this.responseData = this.responseData.filter(d=>d.LIBER_NO!==decisionId)
        this.regulationsCount--;
        
       } catch (error) {
        return error;
      }
  },
 
  // get constants for select option
  async getconstants(endpoint,formData){
    try {
        const response =  await this.$http.post(endpoint,formData);
        console.log(response.data.p_result_out.length);
        return response.data.p_result_out;
       } catch (error) {
        return error;
      }
  },



  // helper methods

  formatDate(date){
        const  months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
        const d = new Date(date);
        const day = d.getDate();
        const month = months[d.getMonth()];
        const year = d.getFullYear();

        return `${day}-${month}-${year}`;
      }



      // dom methods
,
      toggleShowHide(){
        this.showAdd = !this.showAdd;
        this.showSearch = !this.showSearch;
      }
      , 

      search() {
  if (this.searchTerm) {
    const lowerCaseSearchTerm = this.searchTerm.toLowerCase();
    this.searchResults = this.responseData.filter(item =>
      (item.LIBER_NM && item.LIBER_NM.toLowerCase().includes(lowerCaseSearchTerm)) ||
      (item.FILE_ID && item.FILE_ID.toLowerCase().includes(lowerCaseSearchTerm)) ||
      (item.SOURCE_NAME && item.SOURCE_NAME.toLowerCase().includes(lowerCaseSearchTerm)) ||
      (item.STATUS_NAME && item.STATUS_NAME.toLowerCase().includes(lowerCaseSearchTerm))
    );
  } else {
    this.searchResults = [...this.responseData];
  }
},

}


  }
  </script >
    
